import { createHmac } from 'node:crypto'

/** Options for the TOTP code. */
export interface TotpOptions {
  /** The number of digits to generate. */
  digits?: number
  /** The algorithm to use. */
  algorithm?: 'sha1' | 'sha256' | 'sha512'
  /** The number of seconds a TOTP code is valid for. */
  period?: number
}

/**
 * Create a TOTP code from a secret and a timestamp. This function accepts a secret in
 * Base32 format, and a timestamp in seconds. The timestamp is usually obtained from
 * `Date.now() / 1000`, but can also be obtained from a server.
 *
 * A TOTP (Time-based One-Time Password) code is a N-digit code that changes every
 * X seconds and is used to secure authentication through owner-ship of an hardware
 * device. The code is generated by hashing a secret with a timestamp and extracting
 * a N-digit code from the hash.
 *
 * @param secret The secret in Base32 format.
 * @param timestamp The timestamp in seconds.
 * @param options The options for the TOTP code.
 * @returns The TOTP code.
 * @example createTotp('JBSWY3DPEHPK3PXP') // '123456'
 */
export function createTotp(secret: string, timestamp: number, options: TotpOptions = {}): string {
  const {
    digits = 6,
    algorithm = 'sha1',
    period = 30,
  } = options

  // --- Calculate the epoch at which the code is valid.
  const periods = Math.floor(timestamp / period)
  const epoch = periods * period

  // --- Convert the secret to a buffer.
  const secretBuffer = decodeBase32(secret)
  const epochBuffer = new ArrayBuffer(8)
  const epochView = new DataView(epochBuffer)
  epochView.setUint32(4, epoch)

  // --- Hash the timestamp with the secret.
  const hmac = createHmac(algorithm, secretBuffer)
  hmac.update(epochBuffer)
  const hash = hmac.digest()

  // --- Get the last 4 bits of the hash and convert it to a number.
  const offset = hash[hash.byteLength - 1] & 0b00001111
  const codeView = new DataView(hash, offset)
  const code = codeView.getUint32(0) & 0b01111111111111111111111111111111

  // --- Convert the code to a string with the specified number of digits.
  return code.toString().padStart(digits, '0')
}
